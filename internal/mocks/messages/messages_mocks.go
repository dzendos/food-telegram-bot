// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/messages/incoming_msg.go

// Package mock_messages is a generated GoMock package.
package mock_messages

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// DeleteMessage mocks base method.
func (m *MockMessageSender) DeleteMessage(userID, messageID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", userID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageSenderMockRecorder) DeleteMessage(userID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageSender)(nil).DeleteMessage), userID, messageID)
}

// EditMessage mocks base method.
func (m *MockMessageSender) EditMessage(text string, userID, messageID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMessage", text, userID, messageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditMessage indicates an expected call of EditMessage.
func (mr *MockMessageSenderMockRecorder) EditMessage(text, userID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMessage", reflect.TypeOf((*MockMessageSender)(nil).EditMessage), text, userID, messageID)
}

// SendMessage mocks base method.
func (m *MockMessageSender) SendMessage(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageSenderMockRecorder) SendMessage(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageSender)(nil).SendMessage), text, userID)
}

// SendReference mocks base method.
func (m *MockMessageSender) SendReference(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendReference", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendReference indicates an expected call of SendReference.
func (mr *MockMessageSenderMockRecorder) SendReference(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendReference", reflect.TypeOf((*MockMessageSender)(nil).SendReference), text, userID)
}

// SetTransactionMessage mocks base method.
func (m *MockMessageSender) SetTransactionMessage(text string, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTransactionMessage", text, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTransactionMessage indicates an expected call of SetTransactionMessage.
func (mr *MockMessageSenderMockRecorder) SetTransactionMessage(text, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransactionMessage", reflect.TypeOf((*MockMessageSender)(nil).SetTransactionMessage), text, userID)
}
